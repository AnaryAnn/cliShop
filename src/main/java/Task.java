import model.Amount;
import model.Category;
import model.Wallet;
import services.api.OrderService;
import services.api.WalletService;
import services.impl.OrderServiceImpl;
import services.impl.WalletServiceImpl;

import static model.Currency.RUB;

/**
 * ЗАДАНИЕ 1
 *
 * Разработать cli-магазин для покупки товаров
 *
 * Какие сущности должны быть созданы:
 *  - Класс "builder.Order" - заказ.
 *      Параметры:
 *        1. ID - идентификатор заказа
 *        2. Items - список товаров заказа.
 *        3. Total amount - общая сумма заказа. (* выделить в отдельный класс)
 *  = Класс "builder.Item" - товар
 *      Параметры:
 *        1. ID - идентификатор товара
 *        2. Name - наименование товара
 *        3. builder.Category - категория товаров. (* выделить в отдельный класс)
 *        3. builder.Amount - стоимость и валюта. (* выделить в отдельный класс)
 *
 *  Какие задачи необходимо сделать:
 *      1. Сделать cli с помощью которого можно попасть производить покупку товара в магазин.
 *          - Пользователь иметь возможность проверить баланс своего кошелька.
 *          - Перейти к списку доступных для покупки товаров
 *          - Покупка товаров. (*В случае, если у пользователя не хватает денег, нужно показать ему ошибку об этом)
 *      2. Добавить раздел "Возврат товара", где пользователь может произвести возврат товара, который купил.
 *      3. Добавить раздел "История покупок", где будет отражен список всех товаров, которые пользователь купил или вернул.
 *          3.1. Добавить возможность выгрузить историю покупок в отдельный файл.
 *      4. Добавить раздел "Статистика"
 *          4.1. Добавить раздел "Топ продаж" - список best sellers по всем товарам
 *          4.1. Добавить раздел "Популярная категория" - список best sellers по категориям
 *          4.1. Добавить раздел "Оборот категорий" - итоговые суммы оборотов по каждой категории
 *      5. Добавить раздел "Пополнение кошелька"
 *      6. Заполнить магазин товарами.
 *      7. Поцеловать мужа.
 *
 *  ! Заметки !
 *      - Каждый основной раздел ("Покупка товаров", "Возврат товаров", ...) необходимо реализовать отдельным классом сервисом с интрфейсами. И использовать в работе строго интерфейсы.
 *
 * Что необходимо обязательно применить в ходе разработки
 *  1. Абстрактные классы и интерфейсы.
 *  2. Паттерн "Builder" (хороший ресурс https://refactoring.guru/ (работает только с vpn))
 *  3. Custom Exception. Т.е. пишем свое исключение, которое выбрасываем и где то ловим. (Хорошо подойдет для ошибки о недостатке денег на счету для покупки товара)
 *  4. Stream Api.
 *  5. Паттерн "Синглтон" (можно использовать для сервисов)
 */

public class Task {
    public static void main(String[] args) {

        Category category = Category.builder()
                .setId(22464)
                .setName("Electronics")
                .build();

        WalletService walletService = new WalletServiceImpl();
        Wallet wallet = walletService.createWallet(32131l);
        try {
            walletService.deposit(32131l, new Amount(RUB, 100d));
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            walletService.withdraw(32131l, new Amount(RUB, 40d));
        } catch (Exception e) {
            e.printStackTrace();
        }



        System.out.println(wallet.getBalance().toString());
    }
}
